"use strict";function _defineProperty(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(t,e){if(void 0===t||null===t)throw new TypeError("Cannot convert first argument to object");for(var n=Object(t),i=1;i<arguments.length;i++){var a=arguments[i];if(void 0!==a&&null!==a)for(var o=Object.keys(Object(a)),r=0,l=o.length;r<l;r++){var s=o[r],u=Object.getOwnPropertyDescriptor(a,s);void 0!==u&&u.enumerable&&(n[s]=a[s])}}return n}});var DEFAULTOPTION={inline:!1,hot:!0,className:"validate-notice"},debounce=function(){var t=!1,e=void 0;return function(n){e&&clearTimeout(e),e=setTimeout(function(){n(),t=!0},500)}}(),Ajax={get:function(t,e,n){var i="?";if("object"==(void 0===e?"undefined":_typeof(e)))for(var a in e)i=i+a+"="+e[a]+"&";i=i.substr(0,i.length-1);var o=new XMLHttpRequest;o.open("GET",t+i,!0),o.onreadystatechange=function(){(4==o.readyState&&200==o.status||304==o.status)&&n.call(this,o.responseText)},o.send(null)},post:function(t,e,n){var i=new XMLHttpRequest;i.open("POST",t,!0),i.setRequestHeader("Content-type","application/x-www-form-urlencoded"),i.onreadystatechange=function(){4!=i.readyState||200!=i.status&&304!=i.status||n.call(this,i.responseText)},i.send(e)}},Validation=function(){function t(e){_classCallCheck(this,t),this.illegalArray=[],this.option=Object.assign({},DEFAULTOPTION,e),this.inputs=this.option.el.querySelectorAll("[name]"),this.init()}return _createClass(t,[{key:"init",value:function(){var t=this;if(this.option.hot){this.option.submitButton&&(this.disableEvent=document.createEvent("CustomEvent"),this.enableEvent=document.createEvent("CustomEvent"),this.disableEvent.initCustomEvent("disable",!0,!0,{}),this.enableEvent.initCustomEvent("enable",!0,!0,{}),this.option.submitButton.addEventListener("disable",function(t){this.setAttribute("disabled",!0)}),this.option.submitButton.addEventListener("enable",function(t){this.removeAttribute("disabled")}));for(var e=0;e<this.inputs.length;e++)!function(e){t.inputs[e].id=e,t.inputs[e].addEventListener("keyup",function(n){debounce(function(){t.validateData(t.inputs[e],t.option.model[t.inputs[e].name])})})}(e)}this.option.submitButton&&this.option.submitButton.addEventListener("click",function(e){t.validateForm()})}},{key:"validateData",value:function(t,e){var n=!0,i=t,a=e,o="";if(a)return a.required&&i.value.toString().length<=0?(n=!1,o="required"):a.required?a.pattern?new RegExp(a.pattern).test(i.value)||(n=!1,o="pattern"):a.type&&_typeof(i.value)!=a.type&&(n=!1,o="pattern"):i.value.toString().length>0&&(a.pattern?new RegExp(a.pattern).test(i.value)||(n=!1,o="pattern"):a.type&&_typeof(i.value)!=a.type&&(n=!1,o="type")),a.confirm&&a.confirm.value!=i.value&&(n=!1,o="confirm"),n?a.ajax?this.serverValidate(i,a)||(n=!1):this.removeValidateNotice(i):"object"==_typeof(a.notice)?this.validateNotice(i,a.notice[o]):this.validateNotice(i,a.notice),n?(this.illegalArray[i.id]=!0,this.illegalArray.every(function(t){return!!t&&1==t})&&this.option.submitButton.dispatchEvent(this.enableEvent)):(this.illegalArray[i.id]=!1,this.option.submitButton.dispatchEvent(this.disableEvent)),n}},{key:"serverValidate",value:function(t,e){var n=this;Ajax[e.ajax.method](e.ajax.url,_defineProperty({},t.name,t.value),function(i){var a=e.ajax.code[JSON.parse(i)[e.ajax.name]];return a?(n.validateNotice(t,a),!1):(n.removeValidateNotice(t),!0)})}},{key:"validateForm",value:function(){for(var t=this.option.model,e=this.inputs,n=!0,i=0;i<e.length;i++){var a=e[i],o=t[a.name];this.validateData(a,o)||n&&(n=!1)}return n}},{key:"validateNotice",value:function(t,e){var n=void 0,i=void 0;(n=(i=this.option.inline?t.parentElement.parentElement:t.parentElement).querySelector("."+this.option.className))||((n=document.createElement("div")).className=this.option.className,i.appendChild(n)),this.option.inline&&(n.style.display="inline-block",n.style.padding="0 10px"),n.innerHTML='<p style="background:#ffd7d7;\n\t\tcolor:#f55;\n\t\tline-height:26px;\n\t\tfont-size:12px;\n\t\ttext-align:left;\n\t\tpadding: 0 10px;\n    \tborder-radius: 2px;\n    \tborder: 1px solid #ffc8c8;">'+e+"</p>"}},{key:"removeValidateNotice",value:function(t){var e=void 0,n=(e=this.option.inline?t.parentElement.parentElement:t.parentElement).querySelector("."+this.option.className);n&&e.removeChild(n)}}]),t}();exports.default=Validation;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
